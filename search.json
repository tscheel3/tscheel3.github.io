[
  {
    "objectID": "Project2Trials.html",
    "href": "Project2Trials.html",
    "title": "Tyler Scheel's Sports Data Blog",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(gt)\nlibrary(ggrepel)\nlibrary(ggalt)\n\nRegistered S3 methods overwritten by 'ggalt':\n  method                  from   \n  grid.draw.absoluteGrob  ggplot2\n  grobHeight.absoluteGrob ggplot2\n  grobWidth.absoluteGrob  ggplot2\n  grobX.absoluteGrob      ggplot2\n  grobY.absoluteGrob      ggplot2\n\nlibrary(ggtext)\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nlibrary(patchwork)\n\nThis is going to be a lot of experiments, I don’t know how I’m gonna do this. I’m going to start out by trying to calculate wAV shares by draft class.\n\nDraft22to15 &lt;- read.csv(\"22to15FullDrafts.csv\")\n\nThese next 2 blocks are just for fun. First, seeing which team has the most picks in the last 8 years, then seeing which team has the most first team all-pro selections.\n\nDraft22to15 |&gt; group_by(Tm) |&gt; summarise(totalpicks = n()) |&gt; arrange(desc(totalpicks))\n\n# A tibble: 32 × 2\n   Tm    totalpicks\n   &lt;chr&gt;      &lt;int&gt;\n 1 MIN           85\n 2 BAL           76\n 3 CLE           76\n 4 GB            73\n 5 CIN           71\n 6 NE            71\n 7 WAS           71\n 8 DAL           70\n 9 DEN           70\n10 SF            70\n# ℹ 22 more rows\n\n\n\nDraft22to15 |&gt; group_by(Tm) |&gt; summarise(AllPro1 = sum(AP1)) |&gt; arrange(desc(AllPro1))\n\n# A tibble: 32 × 2\n   Tm    AllPro1\n   &lt;chr&gt;   &lt;int&gt;\n 1 KC          9\n 2 IND         7\n 3 SF          7\n 4 BAL         5\n 5 MIA         5\n 6 TEN         5\n 7 DAL         4\n 8 LAR         4\n 9 MIN         4\n10 ARI         3\n# ℹ 22 more rows\n\n\nThis is just collecting the totals so I can calculate the percentage/share.\n\nDraft22to15 |&gt; group_by(DrYr) |&gt; summarise(totalDrAV = sum(DrAV), totalAV = sum(wAV))\n\n# A tibble: 8 × 3\n   DrYr totalDrAV totalAV\n  &lt;int&gt;     &lt;int&gt;   &lt;int&gt;\n1  2015      2534    3790\n2  2016      2870    3993\n3  2017      2874    3639\n4  2018      2797    3422\n5  2019      2313    2496\n6  2020      1950    1999\n7  2021      1280    1296\n8  2022       606     610\n\n\nThis next block is so I can calculate the Drafted Approximate Value Percentage (DrAVpct) and Career Weighted Approximate Value Percentage (CwAVpct) for every single player. I do this by dividing their DrAV and wAV by the total in their draft class.\n\nDraft22 &lt;- Draft22to15 |&gt; filter(DrYr == \"2022\") |&gt; mutate(DrAVpct = DrAV/606, CwAVpct = wAV/610)\nDraft21 &lt;- Draft22to15 |&gt; filter(DrYr == \"2021\") |&gt; mutate(DrAVpct = DrAV/1280, CwAVpct = wAV/1296)\nDraft20 &lt;- Draft22to15 |&gt; filter(DrYr == \"2020\") |&gt; mutate(DrAVpct = DrAV/1950, CwAVpct = wAV/1999)\nDraft19 &lt;- Draft22to15 |&gt; filter(DrYr == \"2019\") |&gt; mutate(DrAVpct = DrAV/2313, CwAVpct = wAV/2496)\nDraft18 &lt;- Draft22to15 |&gt; filter(DrYr == \"2018\") |&gt; mutate(DrAVpct = DrAV/2797, CwAVpct = wAV/3422)\nDraft17 &lt;- Draft22to15 |&gt; filter(DrYr == \"2017\") |&gt; mutate(DrAVpct = DrAV/2874, CwAVpct = wAV/3639)\nDraft16 &lt;- Draft22to15 |&gt; filter(DrYr == \"2016\") |&gt; mutate(DrAVpct = DrAV/2870, CwAVpct = wAV/3993)\nDraft15 &lt;- Draft22to15 |&gt; filter(DrYr == \"2015\") |&gt; mutate(DrAVpct = DrAV/2534, CwAVpct = wAV/3790)\n\nNow that I’ve calculated the DrAVpct (AKA Draft Approximate Value share) for every player, I will put the dataframes back together so I can calculate across all draft classes.\n\nDraft22to15v2 &lt;- bind_rows(Draft22, Draft21, Draft20, Draft19, Draft18, Draft17, Draft16, Draft15)\n\nI think I am now going to attempt to find the ranges.\n\nPicks1to5 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 1, 5)) |&gt; \n  summarise(PickRange = \"1-5\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks6to10 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 6, 10)) |&gt; \n  summarise(PickRange = \"6-10\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks11to20 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 11, 20)) |&gt; \n  summarise(PickRange = \"11-20\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks21to30 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 21, 30)) |&gt; \n  summarise(PickRange = \"21-30\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks31to40 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 31, 40)) |&gt; \n  summarise(PickRange = \"31-40\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks41to50 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 41, 50)) |&gt; \n  summarise(PickRange = \"41-50\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks51to60 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 51, 60)) |&gt; \n  summarise(PickRange = \"51-60\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks61to70 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 61, 70)) |&gt; \n  summarise(PickRange = \"61-70\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks71to80 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 71, 80)) |&gt; \n  summarise(PickRange = \"71-80\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks81to90 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 81, 90)) |&gt; \n  summarise(PickRange = \"81-90\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks91to100 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 91, 100)) |&gt; \n  summarise(PickRange = \"91-100\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks101to125 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 101, 125)) |&gt; \n  summarise(PickRange = \"101-125\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks126to150 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 126, 150)) |&gt; \n  summarise(PickRange = \"126-150\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks151to175 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 151, 175)) |&gt; \n  summarise(PickRange = \"151-175\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks176to225 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 176, 225)) |&gt; \n  summarise(PickRange = \"176-225\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPicks226toend &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 226, 262)) |&gt; \n  summarise(PickRange = \"226-end\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\nPickRangePct &lt;- bind_rows(Picks1to5, Picks6to10, Picks11to20, Picks21to30, Picks31to40, Picks41to50, Picks51to60, Picks61to70, Picks71to80, Picks81to90, Picks91to100, Picks101to125, Picks126to150, Picks151to175, Picks176to225, Picks226toend) |&gt; mutate(HitOrMiss = case_when(DrAVExpGap &gt; -0.001 ~ \"Hit\", DrAVExpGap &lt; -0.001 ~ \"Miss\"))\n\n\nPickRangePct |&gt; group_by(PickRange) |&gt; summarize(AvgAVExp = mean(DrAVpct)) |&gt; mutate(FirstSort = PickRange) |&gt; separate(FirstSort, into=c(\"Sort\", \"Other\")) |&gt; arrange(as.numeric(Sort)) |&gt; select(PickRange, AvgAVExp) |&gt; gt() |&gt; cols_label(\n    PickRange = \"Pick Range\",\n    AvgAVExp = \"Expected AV\"\n  ) |&gt;\n  tab_header(\n    title = \"2015 to 2022\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(PickRange, AvgAVExp),\n    decimals = 3)\n\n\n\n\n\n  \n    \n      2015 to 2022\n    \n    \n    \n      Pick Range\n      Expected AV\n    \n  \n  \n    1-5\n1.260%\n    6-10\n1.214%\n    11-20\n0.919%\n    21-30\n0.713%\n    31-40\n0.802%\n    41-50\n0.591%\n    51-60\n0.541%\n    61-70\n0.681%\n    71-80\n0.475%\n    81-90\n0.440%\n    91-100\n0.352%\n    101-125\n0.311%\n    126-150\n0.329%\n    151-175\n0.231%\n    176-225\n0.147%\n    226-end\n0.109%\n  \n  \n  \n\n\n\n\n\nOvrTeamHitRate &lt;- PickRangePct |&gt; group_by(Tm, HitOrMiss) |&gt; summarise(Hits = n()) |&gt; pivot_wider(names_from = HitOrMiss, values_from = Hits) |&gt; mutate(TotalPicks = Hit+Miss, HitRate = Hit/TotalPicks) |&gt; arrange(desc(HitRate))\n\n`summarise()` has grouped output by 'Tm'. You can override using the `.groups`\nargument.\n\nR1TeamHitRate &lt;- PickRangePct |&gt; group_by(Tm, HitOrMiss) |&gt; filter(Rnd ==\"1\") |&gt; summarise(Hits = n()) |&gt; pivot_wider(names_from = HitOrMiss, values_from = Hits) |&gt; mutate(TotalPicks = Hit+Miss, HitRate = Hit/TotalPicks) |&gt; arrange(desc(HitRate))\n\n`summarise()` has grouped output by 'Tm'. You can override using the `.groups`\nargument.\n\n\nI really doubt that was the most efficient way to do that but I got where I needed to go. Onward.\nNow I will calculate and make tables showing overall data for players and for teams.\n\nPlayerDifferenceTop &lt;- PickRangePct |&gt; summarise(Player, Tm, Pick, DrAVpct, ExpDrAV, DrAVExpGap) |&gt; arrange(desc(DrAVExpGap)) |&gt; top_n(10, DrAVExpGap)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPlayerDifferenceBottom &lt;- PickRangePct |&gt; summarise(Player, Tm, Pick, DrAVpct, ExpDrAV, DrAVExpGap) |&gt; arrange(DrAVExpGap) |&gt; top_n(-3, DrAVExpGap)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nPlayerDifference &lt;- PickRangePct |&gt; summarise(Player, Tm, Pick, DrAVpct, ExpDrAV, DrAVExpGap) |&gt; arrange(desc(DrAVExpGap))\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\nPlayerDifferenceTop |&gt; \n  gt() |&gt; \n  cols_label(\n    DrAVExpGap = \"Gap\",\n    DrAVpct = \"DrAV share\",\n    ExpDrAV = \"Expected DrAV share\"\n  ) |&gt;\n  tab_header(\n    title = \"Dak Prescott is overperforming his draft slot\",\n    subtitle = \"The top 15 draft picks by production above expected on drafted team\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Tyler Scheel  |  **Source:**\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(DrAVExpGap, DrAVpct, ExpDrAV),\n    decimals = 3\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"green\"),\n      cell_text(color = \"black\")\n    ), locations = cells_body(\n    columns = DrAVExpGap,\n    rows = DrAVExpGap &lt;100\n  ))\n\n\n\n\n\n  \n    \n      Dak Prescott is overperforming his draft slot\n    \n    \n      The top 15 draft picks by production above expected on drafted team\n    \n    \n      Player\n      Tm\n      Pick\n      DrAV share\n      Expected DrAV share\n      Gap\n    \n  \n  \n    Dak Prescott\nDAL\n135\n2.683%\n0.329%\n2.354%\n    Tyreek Hill\nKC\n165\n2.195%\n0.231%\n1.964%\n    Micah Parsons\nDAL\n12\n2.812%\n0.919%\n1.894%\n    Patrick Mahomes\nKC\n10\n2.958%\n1.214%\n1.744%\n    Lamar Jackson\nBAL\n32\n2.467%\n0.802%\n1.665%\n    Danielle Hunter\nMIN\n88\n2.092%\n0.440%\n1.651%\n    Tyler Lockett\nSEA\n69\n2.328%\n0.681%\n1.647%\n    Aaron Jones\nGB\n182\n1.775%\n0.147%\n1.628%\n    Eric Kendricks\nMIN\n45\n2.210%\n0.591%\n1.619%\n    Grady Jarrett\nATL\n137\n1.934%\n0.329%\n1.604%\n  \n  \n    \n      By: Tyler Scheel  |  Source:\n    \n  \n  \n\n\n\n\n\nPlayerDifferenceBottom |&gt; \n  gt() |&gt; \n  cols_label(\n    DrAVExpGap = \"Gap\",\n    DrAVpct = \"DrAV share\",\n    ExpDrAV = \"Expected DrAV share\"\n  ) |&gt;\n  tab_header(\n    title = \"Josh Rosen was not a great draft pick!\",\n    subtitle = \"The 15 worst draft picks by production above expected on drafted team\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Tyler Scheel  |  **Source:**\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(DrAVExpGap, DrAVpct, ExpDrAV),\n    decimals = 3\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"red\"),\n      cell_text(color = \"white\")\n    ), locations = cells_body(\n    columns = DrAVExpGap,\n    rows = DrAVExpGap &lt;100\n  )\n  )\n\n\n\n\n\n  \n    \n      Josh Rosen was not a great draft pick!\n    \n    \n      The 15 worst draft picks by production above expected on drafted team\n    \n    \n      Player\n      Tm\n      Pick\n      DrAV share\n      Expected DrAV share\n      Gap\n    \n  \n  \n    Josh Rosen\nARI\n10\n0.072%\n1.214%\n−1.142%\n    Kevin White\nCHI\n7\n0.079%\n1.214%\n−1.135%\n    Dante Fowler\nJAX\n3\n0.197%\n1.260%\n−1.062%\n  \n  \n    \n      By: Tyler Scheel  |  Source:\n    \n  \n  \n\n\n\n\n\nTeamDifference &lt;- PickRangePct |&gt; group_by(Tm) |&gt; summarise(AvgDrAVpct = mean(DrAVpct), TmExpDrAV = mean(ExpDrAV), Difference = AvgDrAVpct-TmExpDrAV) |&gt; arrange(desc(Difference))\n\n\nTeamDifference |&gt; \n  gt() |&gt; \n  cols_label(\n    Difference = \"Avg Gap\"\n  ) |&gt;\n  tab_header(\n    title = \"Chiefs On Top\",\n    subtitle = \"Kansas City has done the most with it's picks in the last 8 years\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Tyler Scheel  |  **Source:** \")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(Difference, AvgDrAVpct, TmExpDrAV),\n    decimals = 3\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"navy\"),\n      cell_text(color = \"white\")\n    ), locations = cells_body(\n    columns = Difference,\n    rows = Difference &lt;100\n  ))\n\n\n\n\n\n  \n    \n      Chiefs On Top\n    \n    \n      Kansas City has done the most with it's picks in the last 8 years\n    \n    \n      Tm\n      AvgDrAVpct\n      TmExpDrAV\n      Avg Gap\n    \n  \n  \n    KC\n0.514%\n0.374%\n0.140%\n    DAL\n0.456%\n0.344%\n0.112%\n    LAC\n0.476%\n0.404%\n0.072%\n    BUF\n0.441%\n0.371%\n0.070%\n    CHI\n0.454%\n0.389%\n0.064%\n    NO\n0.500%\n0.436%\n0.064%\n    ATL\n0.492%\n0.438%\n0.054%\n    PIT\n0.405%\n0.355%\n0.050%\n    LAR\n0.339%\n0.300%\n0.038%\n    IND\n0.408%\n0.372%\n0.036%\n    TB\n0.465%\n0.433%\n0.032%\n    SEA\n0.383%\n0.364%\n0.019%\n    PHI\n0.388%\n0.371%\n0.017%\n    GB\n0.359%\n0.345%\n0.014%\n    SF\n0.399%\n0.398%\n0.001%\n    BAL\n0.386%\n0.388%\n−0.002%\n    CIN\n0.375%\n0.380%\n−0.005%\n    MIN\n0.316%\n0.321%\n−0.005%\n    WAS\n0.354%\n0.362%\n−0.008%\n    NE\n0.326%\n0.335%\n−0.009%\n    MIA\n0.408%\n0.421%\n−0.012%\n    HOU\n0.399%\n0.415%\n−0.016%\n    DET\n0.381%\n0.398%\n−0.017%\n    ARI\n0.356%\n0.378%\n−0.022%\n    CAR\n0.399%\n0.424%\n−0.025%\n    DEN\n0.331%\n0.364%\n−0.033%\n    TEN\n0.390%\n0.428%\n−0.038%\n    NYG\n0.397%\n0.481%\n−0.085%\n    JAX\n0.394%\n0.485%\n−0.091%\n    CLE\n0.315%\n0.419%\n−0.104%\n    LV\n0.295%\n0.419%\n−0.124%\n    NYJ\n0.338%\n0.473%\n−0.136%\n  \n  \n    \n      By: Tyler Scheel  |  Source:\n    \n  \n  \n\n\n\n\n\nggplot() + \n  geom_dumbbell(\n    data=TeamDifference, \n    aes(y=reorder(Tm, AvgDrAVpct), x=AvgDrAVpct, xend=TmExpDrAV),\n    size = 2,\n    colour = \"lightgrey\",\n    colour_x = \"#013369\",\n    colour_xend = \"#D50A0A\") +\n  labs(\n    x=\"Drafted AV Share\",\n    y=\"\",\n    title=\"The Chiefs Draft Picks Outperform Expectations\", \n    subtitle = \"The red dots represent the Expected Drafted AV Share of all their picks, the blue dots represent \\n actual Drafted AV Share\",\n    caption=\"Source: Sports Reference | By: Tyler Scheel\"\n  ) + \n  theme_minimal() +\n   theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    axis.title = element_text(size = 10.5),\n    axis.text = element_text(size = 9)\n    ) \n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\nOvrTeamHitRate |&gt; \n  ungroup() |&gt; \n  top_n(16, wt=HitRate) |&gt;\n  gt() |&gt; \n  cols_label(\n    Tm = \"Team\",\n    HitRate = \"Hit Rate\"\n  ) |&gt; \n  tab_header(\n    title = \"Chargers Draft Picks Hit More Than Any Other Franchise\",\n    subtitle = \"Besides LA and Kansas City, the top half of the league in Hit Rate hover around 50% \"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Tyler Scheel  |  **Source:** Pro Football Reference\")\n  ) |&gt;\n\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(HitRate),\n    decimals = 2\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"#013369\"),\n      cell_text(color = \"white\")\n    ), locations = cells_body(\n    columns = HitRate,\n    rows = HitRate &lt;100\n  ))\n\n\n\n\n\n  \n    \n      Chargers Draft Picks Hit More Than Any Other Franchise\n    \n    \n      Besides LA and Kansas City, the top half of the league in Hit Rate hover around 50% \n    \n    \n      Team\n      Hit\n      Miss\n      TotalPicks\n      Hit Rate\n    \n  \n  \n    LAC\n39\n18\n57\n68.42%\n    KC\n35\n23\n58\n60.34%\n    IND\n38\n31\n69\n55.07%\n    ATL\n30\n25\n55\n54.55%\n    PIT\n33\n28\n61\n54.10%\n    WAS\n38\n33\n71\n53.52%\n    DAL\n37\n33\n70\n52.86%\n    TB\n31\n28\n59\n52.54%\n    DET\n34\n31\n65\n52.31%\n    HOU\n28\n26\n54\n51.85%\n    ARI\n30\n28\n58\n51.72%\n    LAR\n35\n33\n68\n51.47%\n    CHI\n29\n28\n57\n50.88%\n    MIA\n29\n29\n58\n50.00%\n    GB\n36\n37\n73\n49.32%\n    CIN\n35\n36\n71\n49.30%\n  \n  \n    \n      By: Tyler Scheel  |  Source: Pro Football Reference\n    \n  \n  \n\n\n\n\n\nOvrTeamHitRate |&gt; \n  ungroup() |&gt; \n  top_n(16, wt=-HitRate) |&gt;\n  gt() |&gt; \n  cols_label(\n    Tm = \"Team\",\n    HitRate = \"Hit Rate\"\n  ) |&gt;\n  tab_header(\n    title = \"Raiders and Browns Fans, Cover Your Eyes\",\n    subtitle = \"The bottom half of the league features 5 teams under 40%\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Tyler Scheel  |  **Source:** Pro Football Reference\")\n  ) |&gt;\n\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(HitRate),\n    decimals = 2\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"#D50A0A\"),\n      cell_text(color = \"white\")\n    ), locations = cells_body(\n    columns = HitRate,\n    rows = HitRate &lt;100\n  ))\n\n\n\n\n\n  \n    \n      Raiders and Browns Fans, Cover Your Eyes\n    \n    \n      The bottom half of the league features 5 teams under 40%\n    \n    \n      Team\n      Hit\n      Miss\n      TotalPicks\n      Hit Rate\n    \n  \n  \n    BUF\n28\n29\n57\n49.12%\n    CAR\n27\n29\n56\n48.21%\n    NO\n23\n25\n48\n47.92%\n    SEA\n33\n36\n69\n47.83%\n    BAL\n36\n40\n76\n47.37%\n    DEN\n33\n37\n70\n47.14%\n    PHI\n26\n30\n56\n46.43%\n    MIN\n39\n46\n85\n45.88%\n    SF\n32\n38\n70\n45.71%\n    NYG\n27\n34\n61\n44.26%\n    TEN\n25\n36\n61\n40.98%\n    NE\n28\n43\n71\n39.44%\n    NYJ\n23\n37\n60\n38.33%\n    JAX\n24\n40\n64\n37.50%\n    CLE\n24\n52\n76\n31.58%\n    LV\n19\n45\n64\n29.69%\n  \n  \n    \n      By: Tyler Scheel  |  Source: Pro Football Reference\n    \n  \n  \n\n\n\n\nThis is just cuz I’m curious.\n\nDraft22to15v2 |&gt; arrange(desc(DrAVpct)) |&gt; summarise(Player, Tm, Pick, DrAVpct) |&gt; filter(Player == \"Jalen Ramsey\" | Player == \"Sauce Gardner\") |&gt; gt() |&gt; opt_row_striping() |&gt; opt_table_lines(\"none\") |&gt; tab_header(\n    title = \"Best 10 Draft Picks by Approximate Value\",\n    subtitle = \"\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n    fmt_percent(\n    columns = c(DrAVpct),\n    decimals = 2\n  )\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\n\n\n\n  \n    \n      Best 10 Draft Picks by Approximate Value\n    \n    \n    \n      Player\n      Tm\n      Pick\n      DrAVpct\n    \n  \n  \n    Sauce Gardner\nNYJ\n4\n2.31%\n    Jalen Ramsey\nJAX\n5\n1.01%\n  \n  \n  \n\n\n\n\nI am all over the place here, but I want to try to make a bubble chart type graph.I will try to do it by round/section of the draft.\n\nFirstRound &lt;- PickRangePct |&gt; group_by(Tm) |&gt; filter(Rnd == \"1\") |&gt; summarise(TmDrAV = mean(DrAVpct), AvgPick = mean(Pick), TotalPicks = n()) |&gt; arrange(desc(TmDrAV))\n\n\nR1TeamHitRate &lt;- PickRangePct |&gt; filter(Rnd == \"1\") |&gt; group_by(Tm, HitOrMiss) |&gt; summarise(Hits = n()) |&gt; pivot_wider(names_from = HitOrMiss, values_from = Hits) |&gt; mutate(TotalPicks = Hit+Miss, HitRate = Hit/TotalPicks) |&gt; arrange(desc(HitRate))\n\n`summarise()` has grouped output by 'Tm'. You can override using the `.groups`\nargument.\n\n\n\nggplot() + \n  geom_point(data=PlayerDifference, aes(x=ExpDrAV, y=DrAVpct), color = \"lightgrey\", size = 2) +\n  geom_point(data=PlayerDifferenceTop, aes(x=ExpDrAV, y=DrAVpct), color = \"#013369\", size = 2.5) +\n  geom_point(data=PlayerDifferenceBottom, aes(x=ExpDrAV, y=DrAVpct), color = \"#D50A0A\", size = 2.5) +\n  geom_text_repel(data=PlayerDifferenceTop, aes(x=ExpDrAV, y=DrAVpct, label=Player), point.padding = 3) +\n  geom_text_repel(data=PlayerDifferenceBottom, aes(x=ExpDrAV, y=DrAVpct, label=Player)) +\n  labs(\n    x=\"Expected Drafted AV Share\", \n    y=\"Drafted AV Share\", \n    title=\"Star Players Can Be Found in Every Round\", \n    subtitle=\"Patrick Mahomes leads in Drafted AV Share, but Dak Prescott is the biggest overachiever based \\n on pick range\", \n    caption=\"Source: Pro Football Reference | Tyler Scheel\"\n    ) + \n  scale_x_continuous(labels = scales::percent) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal() +\n   theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    axis.title = element_text(size = 10.5),\n    axis.text = element_text(size = 9)\n    )"
  },
  {
    "objectID": "posts/kansas-city-pass-catchers/index.html",
    "href": "posts/kansas-city-pass-catchers/index.html",
    "title": "Kansas City Pass Catchers: Underrated or Underhated?",
    "section": "",
    "text": "With 5 Straight AFC Championship game appearances and 2 Super Bowl wins since 2018, Chiefs fans have to get creative when finding something to complain about. Over the years it’s been the offensive line, the defense, the run game to name a few. This season, most fans believe the pass catchers, especially the receivers, are holding the team back. The eye test is one thing, but stats are another.\nAre the Chiefs pass catchers actually as bad as people think?\nI’ll first show some of the things they do well, then their biggest flaw. To start, let’s look at the basic, but pretty telling, stat that is yards per game. Good passing offenses get the most passing yards, it’s that simple.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(ggalt)\nlibrary(ggtext)\nlibrary(gt)\n\nNGSplayer &lt;- read_csv(\"NGSv2.csv\")\nTeamAdv23 &lt;- read_csv(\"TmAdvRec23v2.csv\")\n\nTopRecOffenses &lt;- TeamAdv23 |&gt; \n  mutate(YPG = Yds/G) |&gt; \n  summarise(Tm, YPG) |&gt; \n  arrange(desc(YPG)) |&gt; \n  top_n(10)\n\nChiefsYPG &lt;- TeamAdv23 |&gt; \n  mutate(YPG = Yds/G) |&gt; \n  summarise(Tm, YPG) |&gt; \n  filter(Tm == \"Kansas City Chiefs\")\n\nPlayerYAC &lt;- NGSplayer |&gt; \n  summarise(\n    PLAYER, \n    YACpr,\n    xYACpr,\n    YACoverExp = YACpr - xYACpr) |&gt; \n  arrange(desc(xYACpr)) |&gt; \n  top_n(20,xYACpr)\n\nChiefsYAC &lt;- NGSplayer |&gt; \n  summarise(\n    PLAYER, \n    YACpr,\n    xYACpr,\n    YACoverExp = YACpr - xYACpr) |&gt; \n  arrange(desc(xYACpr)) |&gt; \n  top_n(20,xYACpr) |&gt; \n  filter(PLAYER == \"Rashee Rice\" | PLAYER == \"Marquez Valdes-Scantling\" | PLAYER == \"Kadarius Toney\" | PLAYER == \"Skyy Moore\" | PLAYER == \"Travis Kelce\")\n\nDropsTCR &lt;- TeamAdv23 |&gt; \n  summarise(\n    Tm, Drop, TrueCatchRate = Rec/OnTgt) |&gt;\n  arrange(desc(Drop)) |&gt; \n  top_n(10,Drop)\n\nggplot() +\n  geom_bar(\n    data=TopRecOffenses,\n    aes(x=reorder(Tm, YPG), weight=YPG), fill=\"grey\") + \n  geom_bar(\n    data=ChiefsYPG,\n    aes(x=reorder(Tm, YPG), weight=YPG), fill=\"#E31837\") + coord_flip() +\n  labs(\n    x=\"\",\n    y=\"Receiving Yards Per Game\",\n    title=\"The Chiefs are Near the Top in Receiving Yards Per Game\", \n    subtitle = \"Kansas City is 4th in the NFL through week 9, averaging about 275 receiving YPG\",\n    caption=\"Source: Sports Reference | By: Tyler Scheel\"\n  ) + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 9),\n    axis.title.y = element_blank(),\n    axis.text = element_text(size = 8),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    plot.title.position = \"plot\",\n    legend.position=\"bottom\"\n  )\n\n\n\n\n\nThe stat is useful, but it includes many factors besides the ability of the pass catchers, such as offensive play calling and quarterback play. However, being top five in yards isn’t something we can just ignore.\nWhat stats can we look at that focus more on the ability of the receiver?\nYards after the catch give a much better idea of how effective the player is regardless of quarterback play. NFL Next Gen Stats has a very intriguing statistic called expected yards after catch, which is “based on numerous factors using tracking data such as how open the receiver is, how fast they’re traveling, how many defenders/blockers are in space, etc.” The data is filtered to only receivers and tight ends with at least 25 targets.\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=PlayerYAC, \n    aes(y=reorder(PLAYER, xYACpr), x=YACpr, xend=xYACpr),\n    size = 2,\n    colour = \"lightgrey\",\n    colour_x = \"darkgrey\",\n    colour_xend = \"black\") +\n  geom_dumbbell(\n    data=ChiefsYAC, \n    aes(y=reorder(PLAYER, xYACpr), x=YACpr, xend=xYACpr),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"#FFB81C\",\n    colour_xend = \"#E31837\") +\n  labs(\n    x=\"Yards After Catch/Reception\",\n    y=\"\",\n    title=\"The Chiefs Top Pass Catchers Excell at Expected YAC\", \n    subtitle = \"Five Kansas City players rank in the top 20 in expected YAC per reception (red), but aren't quite as \\n dominant in actual YAC (gold)\",\n    caption=\"Source: NFL Next Gen Stats | By: Tyler Scheel\"\n  ) + \n  theme_minimal() +\n   theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 9),\n    axis.text = element_text(size = 8),\n    plot.title.position = \"plot\"\n    ) \n\n\n\n\n\nKansas City has the highest expected YAC per reception in the NFL by far. However, they are third in actual YAC. That tells us that even though the Chiefs are great after the catch, they could be even better.\nSo when Kansas City playmakers get the ball in their hands, they are statistically very effective. But catching the ball has been an issue for the Chiefs all season. This table shows the 10 teams with the most drops through week 9 as well as their true catch percentage. True catch percentage is essentially what percentage of on-target throws are caught. Kansas City ranks 27th in true catch percentage.\n\n\nCode\nDropsTCR |&gt; \n  gt() |&gt; \n  cols_label(\n    Tm = \"Team\",\n    Drop = \"Drops\",\n    TrueCatchRate = \"True Catch Rate\"\n  ) |&gt;\n  tab_header(\n    title = \"Kansas City Simply Struggles to Catch\",\n    subtitle = \"The Chiefs lead the NFL in dropped passes, nearly doubling the league average\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Tyler Scheel  |  **Source:** Sports Reference\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=16)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(TrueCatchRate),\n    decimals = 1\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"#E31837\"),\n      cell_text(color = \"#FFB81C\")\n      ),\n    locations = cells_body(\n      rows = Tm == \"Kansas City Chiefs\")\n  )\n\n\n\n\n\n\n  \n    \n      Kansas City Simply Struggles to Catch\n    \n    \n      The Chiefs lead the NFL in dropped passes, nearly doubling the league average\n    \n    \n      Team\n      Drops\n      True Catch Rate\n    \n  \n  \n    Kansas City Chiefs\n25\n86.9%\n    Los Angeles Rams\n21\n83.6%\n    Detroit Lions\n19\n87.7%\n    Cincinnati Bengals\n18\n91.2%\n    Dallas Cowboys\n18\n84.6%\n    Minnesota Vikings\n17\n85.6%\n    Cleveland Browns\n15\n90.0%\n    Indianapolis Colts\n15\n88.6%\n    Green Bay Packers\n15\n82.1%\n    Washington Commanders\n15\n91.4%\n  \n  \n    \n      By: Tyler Scheel  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nIn conclusion, the Chiefs pass catchers are above average to elite in every category that isn’t about actually catching the ball. With a young, inexperienced group of skill players, it isn’t particularly surprising to see them dropping passes. Their ability to get separation and work for yards after the catch gives the group immense upside moving forward if they can limit drops.\nAll in all, if the worst thing Kansas City fans have to whine about are these surprisingly productive receivers and tight ends, they could be well on their way to another world title."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest Posts",
    "section": "",
    "text": "Analysis of NFL Franchises Draft Picks Since 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDec 3, 2023\n\n\nTyler Scheel\n\n\n\n\n\n\n  \n\n\n\n\nKansas City Pass Catchers: Underrated or Underhated?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNov 12, 2023\n\n\nTyler Scheel\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 31, 2023\n\n\nTyler Scheel\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Tyler Scheel. I am a Junior Sports Media and Communications major at the UNL CoJMC. I love all things sports. I’ve always been fascinated by sports statistics and how they can prove or disprove fans wild takes."
  },
  {
    "objectID": "DataChartTrials.html",
    "href": "DataChartTrials.html",
    "title": "Tyler Scheel's Sports Data Blog",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggrepel)\nlibrary(ggalt)\n\nRegistered S3 methods overwritten by 'ggalt':\n  method                  from   \n  grid.draw.absoluteGrob  ggplot2\n  grobHeight.absoluteGrob ggplot2\n  grobWidth.absoluteGrob  ggplot2\n  grobX.absoluteGrob      ggplot2\n  grobY.absoluteGrob      ggplot2\n\nlibrary(ggtext)\nlibrary(gt)\n\nUsing Sports Reference and AWS Next Gen Stats.\n\nNGSplayer &lt;- read_csv(\"NGSv2.csv\")\n\nRows: 124 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): PLAYER, TEAM, POS\ndbl (12): CUSH, SEP, TAY, TAYpct, REC, TAR, CTCHpct, YDS, TD, YACpr, xYACpr,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nTeamAdv23 &lt;- read_csv(\"TmAdvRec23v2.csv\")\n\nRows: 32 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Tm\ndbl (16): G, Tgt, OnTgt, Rec, Yds, TD, 1D, YBC, YBCpr, YAC, YACpr, ADOT, Brk...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nFirst I will show what the Chiefs do well.\nChart 1: Receiving Yards Per Game (data from Sports Reference)\n\nTopRecOffenses &lt;- TeamAdv23 |&gt; mutate(YPG = Yds/G) |&gt; summarise(Tm, YPG) |&gt; arrange(desc(YPG)) |&gt; top_n(10)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\nSelecting by YPG\n\nChiefsYPG &lt;- TeamAdv23 |&gt; mutate(YPG = Yds/G) |&gt; summarise(Tm, YPG) |&gt; filter(Tm == \"Kansas City Chiefs\")\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\nggplot() +\n  geom_bar(\n    data=TopRecOffenses,\n    aes(x=reorder(Tm, YPG), weight=YPG), fill=\"grey\") + \n  geom_bar(\n    data=ChiefsYPG,\n    aes(x=reorder(Tm, YPG), weight=YPG), fill=\"#E31837\") + coord_flip() +\n  labs(\n    x=\"\",\n    y=\"Recieving Yards Per Game\",\n    title=\"Chiefs Near the Top in Receiving Yards Per Game\", \n    subtitle = \"Kansas City is 4th in the NFL through week 9\",\n    caption=\"Source: Sports Reference | By: Tyler Scheel\"\n  ) + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank(),\n    axis.text = element_text(size = 8),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    legend.position=\"bottom\"\n  )\n\n\n\n\nChart 2: YAC, xYAC. I don’t know if I should use Player or Team data yet.\nThe next two code blocks are to show PLAYER YAC/Expected numbers.\n\nPlayerYAC &lt;- NGSplayer |&gt; \n  summarise(\n    PLAYER, YACpr,\n    xYACpr,\n    YACoverExp = YACpr - xYACpr) |&gt; arrange(desc(xYACpr)) |&gt; top_n(20,xYACpr)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\nChiefsYAC &lt;- NGSplayer |&gt; \n  summarise(\n    PLAYER, YACpr,\n    xYACpr,\n    YACoverExp = YACpr - xYACpr) |&gt; arrange(desc(xYACpr)) |&gt; top_n(20,xYACpr) |&gt; filter(PLAYER == \"Rashee Rice\" | PLAYER == \"Marquez Valdes-Scantling\" | PLAYER == \"Kadarius Toney\" | PLAYER == \"Skyy Moore\" | PLAYER == \"Travis Kelce\")\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n^^ Here I was trying to create a dataframe with only Cheifs players so I could highlight them in the dumbbell chart. I still haven’t figured out how to do that.\n\nggplot() + \n  geom_dumbbell(\n    data=PlayerYAC, \n    aes(y=reorder(PLAYER, xYACpr), x=YACpr, xend=xYACpr),\n    size = 2,\n    colour = \"lightgrey\",\n    colour_x = \"darkgrey\",\n    colour_xend = \"black\") +\n  geom_dumbbell(\n    data=ChiefsYAC, \n    aes(y=reorder(PLAYER, xYACpr), x=YACpr, xend=xYACpr),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"#FFB81C\",\n    colour_xend = \"#E31837\") +\n  labs(\n    x=\"Yards After Catch/Reception\",\n    y=\"\",\n    title=\"The Chiefs Top Pass Catchers Excell at Expected YAC\", \n    subtitle = \"5 Kansas City players rank in the top 20 in expected YAC per reception (red), \\n but aren't as dominant in actual YAC (gold)\",\n    caption=\"Source: NFL Next Gen Stats | By: Tyler Scheel\"\n  ) + \n  theme_minimal() +\n   theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 8)\n    ) \n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\nNow I will do TEAM YAC numbers.\n\nTopTeamYAC &lt;- NGSplayer |&gt; group_by(TEAM) |&gt;\n  summarise(\n    YACPR = mean(YACpr),\n    xYACPR = mean(xYACpr),\n    YACoverExp = mean(YACpr - xYACpr)) |&gt; arrange(desc(YACPR)) |&gt; top_n(16,YACPR)\n\n\nggplot() + \n  geom_dumbbell(\n    data=TopTeamYAC, \n    aes(y=reorder(TEAM, YACPR), x=YACPR, xend=xYACPR),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\n  labs(\n    title=\"Chiefs\", \n    subtitle = \"\"\n  ) + \n  theme(\n    plot.subtitle = element_textbox_simple()\n  )\n\n\n\n\nChart 3: Seperation\n\nNGSplayer |&gt; group_by(TEAM) |&gt;\n  summarise(\n    AvgSEP = mean(SEP)) |&gt; arrange(desc(AvgSEP))\n\n# A tibble: 32 × 2\n   TEAM  AvgSEP\n   &lt;chr&gt;  &lt;dbl&gt;\n 1 KC      3.56\n 2 CHI     3.47\n 3 BUF     3.38\n 4 CLE     3.37\n 5 DET     3.3 \n 6 NYG     3.3 \n 7 ARI     3.28\n 8 GB      3.24\n 9 SF      3.23\n10 WAS     3.22\n# ℹ 22 more rows\n\n\nMore Stuff I should maybe use:\n\nTeamAdv23 |&gt; mutate(\n  TrueCatchRate = Rec/OnTgt) |&gt; arrange(TrueCatchRate)\n\n# A tibble: 32 × 18\n   Tm        G   Tgt OnTgt   Rec   Yds    TD  `1D`   YBC YBCpr   YAC YACpr  ADOT\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Gree…     8   261   190   156  1734    12    86   912   5.8   822   5.3   9  \n 2 Los …     9   316   220   184  2242     8   104  1321   7.2   921   5     8.1\n 3 Dall…     8   273   227   192  2042    13   102  1088   5.7   954   5     7.5\n 4 Minn…     9   351   285   244  2590    20   126  1468   6    1122   4.6   6.8\n 5 Pitt…     8   262   184   159  1646     7    70   791   5     855   5.4   7.3\n 6 Kans…     9   340   267   232  2473    17   120  1060   4.6  1413   6.1   6.6\n 7 Jack…     8   275   216   189  1956     9    90  1049   5.6   907   4.8   6.9\n 8 Detr…     8   293   228   200  2174    12   107  1182   5.9   992   5     6.5\n 9 Tamp…     8   277   203   179  1865    12    87   968   5.4   897   5     7.9\n10 New …     9   322   231   204  1940    10    89   920   4.5  1020   5     7.2\n# ℹ 22 more rows\n# ℹ 5 more variables: BrkTkl &lt;dbl&gt;, RecpBRT &lt;dbl&gt;, Drop &lt;dbl&gt;, DropPCT &lt;dbl&gt;,\n#   TrueCatchRate &lt;dbl&gt;\n\n\n\nMostDrops &lt;- TeamAdv23 |&gt; \n  summarise(\n    Tm, Drop) |&gt;\n  arrange(desc(Drop)) |&gt; top_n(10,Drop)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\ntable1 &lt;- MostDrops |&gt; \n  gt() |&gt; \n  cols_label(\n    Tm = \"Team\",\n    Drop = \"Drops\"\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=14)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"#E31837\"),\n      cell_text(color = \"#FFB81C\")\n      ),\n    locations = cells_body(\n      rows = Tm == \"Kansas City Chiefs\")\n  )\n\nThis is an experement:\n\nWorstTCR &lt;- TeamAdv23 |&gt; \n  summarise(\n    TrueCatchRate = Rec/OnTgt, Tm) |&gt;\n  arrange(TrueCatchRate) |&gt; top_n(10,-TrueCatchRate)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\ntable2 &lt;- WorstTCR |&gt; \n  gt() |&gt; \n  cols_label(\n    Tm = \"Team\",\n    TrueCatchRate = \"True Catch Rate\"\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=14)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(TrueCatchRate),\n    decimals = 1\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"#E31837\"),\n      cell_text(color = \"#FFB81C\")\n      ),\n    locations = cells_body(\n      rows = Tm == \"Kansas City Chiefs\"))\n\nTHIS IS THE GOOD COMPLETE VERSION OF THE TABLE, DO NOT EDIT:\n\nDropsTCR &lt;- TeamAdv23 |&gt; \n  summarise(\n    Tm, Drop, TrueCatchRate = Rec/OnTgt) |&gt;\n  arrange(desc(Drop)) |&gt; top_n(10,Drop)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\nDropsTCR |&gt; \n  gt() |&gt; \n  cols_label(\n    Tm = \"Team\",\n    Drop = \"Drops\"\n  ) |&gt;\n  tab_header(\n    title = \"Kansas City Struggles to Catch\",\n    subtitle = \"The Chiefs lead the NFL in dropped passes, nearly doubling the league average\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Tyler Scheel  |  **Source:** Sports Reference\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=15)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"#E31837\"),\n      cell_text(color = \"#FFB81C\")\n      ),\n    locations = cells_body(\n      rows = Tm == \"Kansas City Chiefs\")\n  )\n\n\n\n\n\n  \n    \n      Kansas City Struggles to Catch\n    \n    \n      The Chiefs lead the NFL in dropped passes, nearly doubling the league average\n    \n    \n      Team\n      Drops\n      TrueCatchRate\n    \n  \n  \n    Kansas City Chiefs\n25\n0.8689139\n    Los Angeles Rams\n21\n0.8363636\n    Detroit Lions\n19\n0.8771930\n    Cincinnati Bengals\n18\n0.9115044\n    Dallas Cowboys\n18\n0.8458150\n    Minnesota Vikings\n17\n0.8561404\n    Cleveland Browns\n15\n0.9000000\n    Indianapolis Colts\n15\n0.8863636\n    Green Bay Packers\n15\n0.8210526\n    Washington Commanders\n15\n0.9143969\n  \n  \n    \n      By: Tyler Scheel  |  Source: Sports Reference"
  },
  {
    "objectID": "posts/introduction/index.html",
    "href": "posts/introduction/index.html",
    "title": "Introduction",
    "section": "",
    "text": "My name is Tyler Scheel. I am a Junior Sports Media and Communications major at the UNL CoJMC. I love all things sports. I’ve always been fascinated by sports statistics and how they can prove or disprove fans wild takes."
  },
  {
    "objectID": "posts/nfl-franchise-draft-picks/index.html",
    "href": "posts/nfl-franchise-draft-picks/index.html",
    "title": "Analysis of NFL Franchises Draft Picks Since 2015",
    "section": "",
    "text": "For many fans, the next NFL draft is the only sliver of hope in an otherwise bleak season. The potential of getting a top quarterback in April tempts failing franchises to lose every game on their schedule to make it happen. There are many factors involved in building a successful NFL franchise, but drafting well is vital to building a true dynasty. This begs the question, which franchises have drafted the best lately?\nTo help answer the question, I used the Pro Football Reference (PFR) statistic called Approximate Value (AV). AV is a method created by PFR founder Doug Drinen that calculates a number to represent the seasonal value of any NFL player. Career Approximate Value (cAV) is the accumulation of AV for a player throughout their career. The problem with using cAV to compare players is the number will be bigger for players who have been playing longer. According to the raw statistic, Demarcus Robinson (19 cAV) is a more valuable player than Garrett Wilson (8 cAV). I’d be willing to bet any NFL fan would rather have prime Garrett Wilson over prime Demarcus Robinson on their team. My solution to this problem was to calculate a draft class AV share. I simply added up the total cAV for every draft class, then divided each player’s drafted AV by that number.\nHere’s an example. Jalen Ramsey, who was drafted in 2016, had an AV of 29 with the team that drafted him. The total drafted AV (DrAV) for the 2016 class is 2,870. 29 divided by 2,870 is 0.0101, so Jalen Ramsey’s Drafted AV Share is 1.01%. This percentage allows me to compare any player from any draft class.\nBut drafted AV itself doesn’t account for where the player was picked in the draft. We can’t expect a sixth round pick to perform at the same level as a first rounder. To get around this problem, I grouped every draft pick from 2015 to 2022 by pick range, then averaged the Drafted AV Share for each range to create the Expected Drafted AV Share. Here are the results.\n\n\nCode\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(ggrepel)\nlibrary(ggalt)\nlibrary(ggtext)\nlibrary(scales)\n\nDraft22to15 &lt;- read.csv(\"22to15FullDrafts.csv\")\n\nDraft22 &lt;- Draft22to15 |&gt; filter(DrYr == \"2022\") |&gt; mutate(DrAVpct = DrAV/606, CwAVpct = wAV/610)\nDraft21 &lt;- Draft22to15 |&gt; filter(DrYr == \"2021\") |&gt; mutate(DrAVpct = DrAV/1280, CwAVpct = wAV/1296)\nDraft20 &lt;- Draft22to15 |&gt; filter(DrYr == \"2020\") |&gt; mutate(DrAVpct = DrAV/1950, CwAVpct = wAV/1999)\nDraft19 &lt;- Draft22to15 |&gt; filter(DrYr == \"2019\") |&gt; mutate(DrAVpct = DrAV/2313, CwAVpct = wAV/2496)\nDraft18 &lt;- Draft22to15 |&gt; filter(DrYr == \"2018\") |&gt; mutate(DrAVpct = DrAV/2797, CwAVpct = wAV/3422)\nDraft17 &lt;- Draft22to15 |&gt; filter(DrYr == \"2017\") |&gt; mutate(DrAVpct = DrAV/2874, CwAVpct = wAV/3639)\nDraft16 &lt;- Draft22to15 |&gt; filter(DrYr == \"2016\") |&gt; mutate(DrAVpct = DrAV/2870, CwAVpct = wAV/3993)\nDraft15 &lt;- Draft22to15 |&gt; filter(DrYr == \"2015\") |&gt; mutate(DrAVpct = DrAV/2534, CwAVpct = wAV/3790)\n\nDraft22to15v2 &lt;- bind_rows(Draft22, Draft21, Draft20, Draft19, Draft18, Draft17, Draft16, Draft15)\n\nPicks1to5 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 1, 5)) |&gt; \n  summarise(PickRange = \"1-5\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks6to10 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 6, 10)) |&gt; \n  summarise(PickRange = \"6-10\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks11to20 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 11, 20)) |&gt; \n  summarise(PickRange = \"11-20\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks21to30 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 21, 30)) |&gt; \n  summarise(PickRange = \"21-30\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks31to40 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 31, 40)) |&gt; \n  summarise(PickRange = \"31-40\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks41to50 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 41, 50)) |&gt; \n  summarise(PickRange = \"41-50\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks51to60 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 51, 60)) |&gt; \n  summarise(PickRange = \"51-60\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks61to70 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 61, 70)) |&gt; \n  summarise(PickRange = \"61-70\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks71to80 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 71, 80)) |&gt; \n  summarise(PickRange = \"71-80\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks81to90 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 81, 90)) |&gt; \n  summarise(PickRange = \"81-90\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks91to100 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 91, 100)) |&gt; \n  summarise(PickRange = \"91-100\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks101to125 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 101, 125)) |&gt; \n  summarise(PickRange = \"101-125\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks126to150 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 126, 150)) |&gt; \n  summarise(PickRange = \"126-150\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks151to175 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 151, 175)) |&gt; \n  summarise(PickRange = \"151-175\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks176to225 &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 176, 225)) |&gt; \n  summarise(PickRange = \"176-225\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\nPicks226toend &lt;- Draft22to15v2 |&gt; \n  filter(between(Pick, 226, 262)) |&gt; \n  summarise(PickRange = \"226-end\", Player, Tm, Rnd, Pick, DrAVpct, ExpDrAV = mean(DrAVpct), DrAVExpGap = DrAVpct-ExpDrAV, CwAVpct, ExpCwAVpct = mean(CwAVpct), CwAVExpGap = CwAVpct-ExpCwAVpct)\n\nPickRangePct &lt;- bind_rows(Picks1to5, Picks6to10, Picks11to20, Picks21to30, Picks31to40, Picks41to50, Picks51to60, Picks61to70, Picks71to80, Picks81to90, Picks91to100, Picks101to125, Picks126to150, Picks151to175, Picks176to225, Picks226toend) |&gt; mutate(HitOrMiss = case_when(DrAVExpGap &gt; -0.001 ~ \"Hit\", DrAVExpGap &lt; -0.001 ~ \"Miss\"))\n\nOvrTeamHitRate &lt;- PickRangePct |&gt; group_by(Tm, HitOrMiss) |&gt; summarise(Hits = n()) |&gt; pivot_wider(names_from = HitOrMiss, values_from = Hits) |&gt; mutate(TotalPicks = Hit+Miss, HitRate = Hit/TotalPicks) |&gt; arrange(desc(HitRate))\n\nPlayerDifferenceTop &lt;- PickRangePct |&gt; summarise(Player, Tm, Pick, DrAVpct, ExpDrAV, DrAVExpGap) |&gt; arrange(desc(DrAVExpGap)) |&gt; top_n(10, DrAVExpGap)\n\nPlayerDifferenceBottom &lt;- PickRangePct |&gt; summarise(Player, Tm, Pick, DrAVpct, ExpDrAV, DrAVExpGap) |&gt; arrange(DrAVExpGap) |&gt; top_n(-3, DrAVExpGap)\n\nPlayerDifference &lt;- PickRangePct |&gt; summarise(Player, Tm, Pick, DrAVpct, ExpDrAV, DrAVExpGap) |&gt; arrange(desc(DrAVExpGap))\n\nTeamDifference &lt;- PickRangePct |&gt; group_by(Tm) |&gt; summarise(AvgDrAVpct = mean(DrAVpct), TmExpDrAV = mean(ExpDrAV), Difference = AvgDrAVpct-TmExpDrAV) |&gt; arrange(desc(Difference))\n\nPickRangePct |&gt; group_by(PickRange) |&gt; summarize(AvgAVExp = mean(DrAVpct)) |&gt; mutate(FirstSort = PickRange) |&gt; separate(FirstSort, into=c(\"Sort\", \"Other\")) |&gt; arrange(as.numeric(Sort)) |&gt; select(PickRange, AvgAVExp) |&gt; gt() |&gt; cols_label(\n    PickRange = \"Pick Range\",\n    AvgAVExp = \"Expected Drafted AV Share\"\n  ) |&gt;\n  tab_header(\n    title = \"2015 to 2022\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(PickRange, AvgAVExp),\n    decimals = 3)\n\n\n\n\n\n\n  \n    \n      2015 to 2022\n    \n    \n    \n      Pick Range\n      Expected Drafted AV Share\n    \n  \n  \n    1-5\n1.260%\n    6-10\n1.214%\n    11-20\n0.919%\n    21-30\n0.713%\n    31-40\n0.802%\n    41-50\n0.591%\n    51-60\n0.541%\n    61-70\n0.681%\n    71-80\n0.475%\n    81-90\n0.440%\n    91-100\n0.352%\n    101-125\n0.311%\n    126-150\n0.329%\n    151-175\n0.231%\n    176-225\n0.147%\n    226-end\n0.109%\n  \n  \n  \n\n\n\n\nNow all I had to do was to find the difference by subtracting the players’ Expected Drafted AV Share from their Drafted AV Share. This scatterplot shows every pick and their Expected Drafted AV Share vs Drafted AV Share. Highlighted are the top 10 biggest overachievers as well as the three biggest underachievers based on their pick range and Drafted AV Share.\n\n\nCode\nggplot() + \n  geom_point(data=PlayerDifference, aes(x=ExpDrAV, y=DrAVpct), color = \"lightgrey\", size = 2) +\n  geom_point(data=PlayerDifferenceTop, aes(x=ExpDrAV, y=DrAVpct), color = \"#013369\", size = 2.5) +\n  geom_point(data=PlayerDifferenceBottom, aes(x=ExpDrAV, y=DrAVpct), color = \"#D50A0A\", size = 2.5) +\n  geom_text_repel(data=PlayerDifferenceTop, aes(x=ExpDrAV, y=DrAVpct, label=Player), point.padding = 3) +\n  geom_text_repel(data=PlayerDifferenceBottom, aes(x=ExpDrAV, y=DrAVpct, label=Player)) +\n  labs(\n    x=\"Expected Drafted AV Share\", \n    y=\"Drafted AV Share\", \n    title=\"Star Players Can Be Found in Every Round\", \n    subtitle=\"Patrick Mahomes leads in Drafted AV Share, but Dak Prescott is the biggest overachiever based \\n on Expected Drafted AV Share\", \n    caption=\"Source: Pro Football Reference | Tyler Scheel\"\n    ) + \n  scale_x_continuous(labels = scales::percent) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal() +\n   theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    axis.title = element_text(size = 10.5),\n    axis.text = element_text(size = 9)\n    ) \n\n\n\n\n\nIt’s not surprising to see Josh Rosen has the biggest negative gap of any player since 2015 (-1.14%). The biggest overachiever according to this data is Dak Prescott, the 135th overall pick in 2016, who is 2.35% above his expected 0.33% Drafted AV Share.\nAfter working with the player data, I grouped the picks by Franchise to see how their picks have panned out on the field. This dumbbell chart shows every NFL Franchise ordered by their average Drafted AV Share (blue dots). The red dots represent their average Expected Drafted AV Share.\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=TeamDifference, \n    aes(y=reorder(Tm, AvgDrAVpct), x=AvgDrAVpct, xend=TmExpDrAV),\n    size = 2,\n    colour = \"lightgrey\",\n    colour_x = \"#013369\",\n    colour_xend = \"#D50A0A\") +\n  labs(\n    x=\"Drafted AV Share\",\n    y=\"\",\n    title=\"The Chiefs Draft Picks Outperform Expectations\", \n    subtitle = \"The red dots represent the Expected Drafted AV Share of all their picks, the blue dots represent \\n the actual Drafted AV Share\",\n    caption=\"Source: Pro Football Reference | By: Tyler Scheel\"\n  ) + \n  scale_x_continuous(labels = scales::percent) +\n  theme_minimal() +\n   theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    axis.title = element_text(size = 10.5),\n    axis.text = element_text(size = 9.5)\n    ) \n\n\n\n\n\nThe Chiefs have the widest positive gap between the two stats, averaging 0.14% above expected. Patrick Mahomes and Tyreek Hill certainly pushed them over the edge in this stat. The widest negative gap belongs to the New York Jets, who average 0.14% below expected.\nSo now we know which franchises have been good at finding the diamond in the rough picks over the last 8 years, but which franchises are the most efficient with their picks? To answer this question I calculated a hit or miss category based on the +/- gap between expected and actual Drafted AV Share. This first table shows the top half of the league when it comes to hitting on draft picks.\n\n\nCode\nOvrTeamHitRate |&gt; \n  ungroup() |&gt; \n  top_n(16, wt=HitRate) |&gt;\n  gt() |&gt; \n  cols_label(\n    Tm = \"Team\",\n    HitRate = \"Hit Rate\"\n  ) |&gt; \n  tab_header(\n    title = \"Chargers Draft Picks Hit More Than Any Other Franchise\",\n    subtitle = \"Besides LA and Kansas City, the top half of the league in Hit Rate hover around 50% \"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Tyler Scheel  |  **Source:** Pro Football Reference\")\n  ) |&gt;\n\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(HitRate),\n    decimals = 2\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"#013369\"),\n      cell_text(color = \"white\")\n    ), locations = cells_body(\n    columns = HitRate,\n    rows = HitRate &lt;100\n  ))\n\n\n\n\n\n\n  \n    \n      Chargers Draft Picks Hit More Than Any Other Franchise\n    \n    \n      Besides LA and Kansas City, the top half of the league in Hit Rate hover around 50% \n    \n    \n      Team\n      Hit\n      Miss\n      TotalPicks\n      Hit Rate\n    \n  \n  \n    LAC\n39\n18\n57\n68.42%\n    KC\n35\n23\n58\n60.34%\n    IND\n38\n31\n69\n55.07%\n    ATL\n30\n25\n55\n54.55%\n    PIT\n33\n28\n61\n54.10%\n    WAS\n38\n33\n71\n53.52%\n    DAL\n37\n33\n70\n52.86%\n    TB\n31\n28\n59\n52.54%\n    DET\n34\n31\n65\n52.31%\n    HOU\n28\n26\n54\n51.85%\n    ARI\n30\n28\n58\n51.72%\n    LAR\n35\n33\n68\n51.47%\n    CHI\n29\n28\n57\n50.88%\n    MIA\n29\n29\n58\n50.00%\n    GB\n36\n37\n73\n49.32%\n    CIN\n35\n36\n71\n49.30%\n  \n  \n    \n      By: Tyler Scheel  |  Source: Pro Football Reference\n    \n  \n  \n\n\n\n\nTwo AFC West teams stand out at the top of that chart, one is a bit more surprising than the other. I’ll let you decide which one. A majority of the league hits about 50% of their picks. Which shows how difficult evaluating a player’s value out of college can be.\n\n\nCode\nOvrTeamHitRate |&gt; \n  ungroup() |&gt; \n  top_n(16, wt=-HitRate) |&gt;\n  gt() |&gt; \n  cols_label(\n    Tm = \"Team\",\n    HitRate = \"Hit Rate\"\n  ) |&gt;\n  tab_header(\n    title = \"Raiders and Browns Fans, Cover Your Eyes\",\n    subtitle = \"The bottom half of the league features 5 teams under 40%\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Tyler Scheel  |  **Source:** Pro Football Reference\")\n  ) |&gt;\n\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(HitRate),\n    decimals = 2\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"#D50A0A\"),\n      cell_text(color = \"white\")\n    ), locations = cells_body(\n    columns = HitRate,\n    rows = HitRate &lt;100\n  ))\n\n\n\n\n\n\n  \n    \n      Raiders and Browns Fans, Cover Your Eyes\n    \n    \n      The bottom half of the league features 5 teams under 40%\n    \n    \n      Team\n      Hit\n      Miss\n      TotalPicks\n      Hit Rate\n    \n  \n  \n    BUF\n28\n29\n57\n49.12%\n    CAR\n27\n29\n56\n48.21%\n    NO\n23\n25\n48\n47.92%\n    SEA\n33\n36\n69\n47.83%\n    BAL\n36\n40\n76\n47.37%\n    DEN\n33\n37\n70\n47.14%\n    PHI\n26\n30\n56\n46.43%\n    MIN\n39\n46\n85\n45.88%\n    SF\n32\n38\n70\n45.71%\n    NYG\n27\n34\n61\n44.26%\n    TEN\n25\n36\n61\n40.98%\n    NE\n28\n43\n71\n39.44%\n    NYJ\n23\n37\n60\n38.33%\n    JAX\n24\n40\n64\n37.50%\n    CLE\n24\n52\n76\n31.58%\n    LV\n19\n45\n64\n29.69%\n  \n  \n    \n      By: Tyler Scheel  |  Source: Pro Football Reference\n    \n  \n  \n\n\n\n\nThe bottom 5 are all under 40%. Some are familiar favorites like the Cleveland Browns, some, like the New England Patriots, are new to the depressing franchise club. The Las Vegas Raiders take the cake with a dismal 29.69% hit rate, and have only hit on 2 of their last 10 first round picks.\nIt’s worth noting that this blog is strictly looking at pick/player value, there are a lot of other factors in a franchise besides drafts. Like I anticipated before I started this project, the Kansas City Chiefs have been the best-drafting franchise in the last 8 years. Their combination of home run draft picks and high overall hit rate has built a Super Bowl caliber roster year after year."
  }
]